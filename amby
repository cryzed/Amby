#!/usr/bin/env python

import argparse
import sys
import time

import numpy as np
import qhue
import rgbxy
from PyQt5.QtGui import QScreen, QImage
from PyQt5.QtWidgets import QApplication
from qhue import QhueException

ENCODING = 'UTF-8'
SUCCESS_EXIT_CODE = 0
FAILURE_EXIT_CODE = 1

argument_parser = argparse.ArgumentParser()
argument_parser.add_argument('bridge_address')
argument_parser.add_argument('lights', nargs='+', help='Which lights to use (1, 2, ..., n)')
argument_parser.add_argument('--username', '-u', help='The username to authenticate with the Philips Hue Bridge')
argument_parser.add_argument('--screen', '-s', type=int, help='Specify which screen to use (1 ... n)')
argument_parser.add_argument('--dont-loop', '-d', dest='loop', action='store_false',
                             help='Set the ambient color and exit')
argument_parser.add_argument('--interval', '-i', type=float, default=0.1,
                             help='The interval to wait before setting the ambient color again')


def get_screenshot(screen: QScreen, region=None):
    size = screen.size()
    region = region or (0, 0, size.width(), size.height())
    pixmap = screen.grabWindow(0, *region)
    return pixmap.toImage()


def get_average_image_color(image: QImage):
    pointer = image.constBits()
    pointer.setsize(image.byteCount())
    buffer = pointer.asarray()

    # QImage buffer contains RGBA data
    array = np.ndarray(shape=(len(buffer) // 4, 4), dtype=np.ubyte, buffer=buffer)
    average = np.average(array[:, :3], axis=0)

    # For some reason the channels are in reverse order
    return tuple(int(round(component)) for component in reversed(average))


def main(arguments):
    if not arguments.username:
        choice = input(f'No username specified, do you want to create one now? [Y/n]: ')
        if choice.lower() not in {'', 'y', 'yes'}:
            return FAILURE_EXIT_CODE
        username = qhue.create_new_username(arguments.bridge_address)
        print(f'Username {username!r} created! Save it and use it with --username/-u when calling the script!')
        return SUCCESS_EXIT_CODE

    bridge = qhue.Bridge(arguments.bridge_address, arguments.username)
    application = QApplication([])
    if arguments.screen is None:
        screen = application.primaryScreen()
    else:
        screens = application.screens()
        screen_index = arguments.screen - 1
        if screen_index > len(screens) - 1:
            print(f'Screen #{arguments.screen} is unavailable ({len(screens)} screens recognized)!', file=sys.stderr)
            return FAILURE_EXIT_CODE
        screen = screens[arguments.screen - 1]

    previous_color = None
    color_converter = rgbxy.Converter()
    try:
        while True:
            image = get_screenshot(screen)
            color = get_average_image_color(image)
            # Prevent DivisionByZero exception in rgbxy library:
            # https://github.com/benknight/hue-python-rgb-converter/issues/6
            color = tuple(max(component, 10 ** -3) for component in color)

            if color != previous_color:
                for light in arguments.lights:
                    new_state = {'xy': color_converter.rgb_to_xy(*color)}
                    try:
                        bridge.lights[light].state(**new_state)
                    except QhueException as exception:
                        print(f'Exception occurred while changing the state for light #{light}: {exception}',
                              file=sys.stderr)
            previous_color = color

            if not arguments.loop:
                break
            time.sleep(arguments.interval)
    except KeyboardInterrupt:
        pass

    return SUCCESS_EXIT_CODE


if __name__ == '__main__':
    arguments = argument_parser.parse_args()
    argument_parser.exit(main(arguments))
